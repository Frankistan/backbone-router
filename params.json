{"name":"Backbone-router","tagline":"Routing Backbone with style \\o/","body":"This library wraps the ```Backbone.Router``` to simplify its use and bring new functionalities\r\n\r\nIts structure and API is inspired by routers in the Node.js frameworks: Meteor and ExpressJS.\r\n\r\nAdded functionalities compared to the ```Backbone.Router``` are:\r\n\r\n * Multiple controllers for the same path\r\n * Before and After triggers\r\n * Trigger caching\r\n * Aliasing\r\n * \"Secured\" routes\r\n\r\n## Installation\r\n\r\nYou can install the library via bower:\r\n\r\n```\r\nbower install backbone-router\r\n```\r\n\r\n## Dependencies\r\n\r\nThe project has been renamed from marionette-router to backbone-router, because the ```Backbone.Marionette``` dependency has been removed. It now overrides the ```Backbone.Router``` namespace for simplicity.\r\n\r\nThe dependencies left are:\r\n\r\n - Backbone 1.1.4\r\n - Underscore >= 1.4.4 \r\n\r\n## General use\r\n\r\nDeclaring routes goes through executing a simple method: ```Backbone.Router.map();```\r\n\r\nThis method takes a function as its only parameter which will be executed in the router's context to access the internal API easily. A route consists of a unique name and an object to describe the route's action.\r\n\r\nLet's just jump right in with an example:\r\n\r\n```javascript\r\n// Create a marionette app instance\r\nvar App = new Backbone.Marionette.Application();\r\n\r\n// Start route declarations\r\nBackbone.Router.map(function() {\r\n  // Declare a route named 'home'\r\n  this.route(\"home\", {\r\n    // The url to which the route will respond\r\n    \"path\": \"/\",\r\n    // Method to be executed when the given path is intercepted\r\n    \"action\": function() {\r\n      // Do something fantastic \\o/\r\n    }\r\n  });\r\n\r\n  // Declare other routes...\r\n});\r\n\r\n// Wait for document ready event\r\n$(function() {\r\n  // Start the marionette app\r\n  App.start();\r\n\r\n  // Start the router passing the marionette app instance\r\n  Backbone.Router.start(App);\r\n});\r\n```\r\n\r\n## Start routing\r\n\r\nThe router has to be started via the ```start``` method.\r\n\r\nParameters:\r\n\r\n - App (Mixed) - Can be an instance of ```Backbone.Marionette.Application``` or a copy of ```Backbone.Events```. Will be used to execute triggers declared in routes.\r\n - Options (Object) - Override default router configuration\r\n\r\nIf given a Marionette app instance the router will use the ```vent``` global event aggregator to distribute route triggers.\r\n\r\nBuilding on the previous script, here is an example:\r\n\r\n```javascript\r\n// Create app\r\nvar App = new Backbone.Marionette.Application();\r\n\r\n// Define some routes ...\r\n\r\n// Start the marionette app\r\nApp.start();\r\n\r\n// Start the router passing the marionette app instance and an options object\r\nBackbone.Router.start(App, {\r\n  // Root url for all routes, passed to Backbone.history\r\n  \"root\": \"/admin\",\r\n\r\n  // Activate html5 pushState or not, true by default\r\n  \"pushState\": false,\r\n\r\n  // Whether the user is currently logged in or not\r\n  \"authed\": false,\r\n\r\n  // If not logged in, redirect the user to a route named \"login\" (if it exists)\r\n  \"redirectToLogin\": false,\r\n\r\n  // Print out routing debug information to the console\r\n  \"debug\": true\r\n});\r\n```\r\n\r\nOr passing a ```Backbone.Events``` copy:\r\n\r\n```javascript\r\n// Copy Backbone.Events\r\nvar dispatcher = _.extend({}, Backbone.Events);\r\n\r\n// Start router\r\nBackbone.Router.start(dispatcher);\r\n```\r\n\r\nThe dispatcher can also be overridden before the router is started in this way:\r\n\r\n```javascript\r\nBackbone.Router.dispatcher = _.extend({}, Backbone.Events);\r\n```\r\n\r\n## Router go!\r\n\r\nTo redirect the user to a certain route when, for example, he clicks a link simply use the ```go``` method.\r\n\r\n```javascript\r\nBackbone.Router.go(\"home\");\r\n```\r\n\r\n**Parameters**\r\n\r\n - name (Mixed): The route name to execute or an object describing the route.\r\n - args (Mixed): Array of arguments, can also be a function's ```arguments``` object.\r\n - options (Object): Passed to the Backbone.Router navigate method. Defaults to ```{ \"trigger\": true, \"replace\": false }```\r\n\r\nLet's define a route that takes a parameter:\r\n\r\n```javascript\r\nBackbone.Router.map(function() {\r\n  // Declare a user profile page\r\n  this.route(\"user_profile\", {\r\n    \"path\": \"/user/:id\",\r\n    \"action\": function(userId) {\r\n      // Render user profile page\r\n    }\r\n  });\r\n})\r\n```\r\n\r\nConsidering the current page contains a link like this:\r\n\r\n```javascript\r\n<a href=\"/user/42\" class=\"profile\" data-id=\"42\">Your profile!</a>\r\n```\r\n\r\nWe could write a script (using jquery) to redirect the user like so:\r\n\r\n```javascript\r\n// Intercept the user click\r\n$(\"a.profile\").click(function(e) {\r\n  e.preventDefault();\r\n\r\n  var userId = $(this).attr(\"data-id\");\r\n\r\n  // Redirecting to route named \"user_profile\" passing an id\r\n  Backbone.Router.go(\"user_profile\", [userId]);\r\n});\r\n```\r\n\r\nAs the first parameter to the ```go``` method can be an object, we could also write the previous script in this manner:\r\n\r\n```javascript\r\n// Intercept the user click\r\n$(\"a.profile\").click(function(e) {\r\n  e.preventDefault();\r\n\r\n  // Redirecting to route using the path defined in the href attribute\r\n  Backbone.Router.go({ \"path\": this.href });\r\n});\r\n```\r\n\r\n\r\n## Route declaration parameters\r\n\r\nThe ```path``` and ```action``` parameters are the base of a route. But a few more parameters exist to extend the control of the route.\r\n\r\n```javascript\r\n// Definition object for a route named 'user_edit'\r\n{\r\n  // Path with an 'id' parameter\r\n  \"path\": \"/user/:id/edit\",\r\n\r\n  // Route will only be executed if the user is logged in\r\n  \"authed\": true,\r\n\r\n  // Execute triggers before the 'action' controller\r\n  \"before\": [\r\n    { \"name\": \"core:display\", \"cache\": true },\r\n    \"users:display\"\r\n  ],\r\n\r\n  // Main controller for the route\r\n  \"action\": function(userId) {\r\n    // Render a user edit form\r\n  },\r\n\r\n  // Execute triggers after the 'action' controller\r\n  \"after\": [\r\n    \"core:post_triggers\"\r\n  ],\r\n\r\n  // Executed when user is routed away from this route\r\n  \"close\": function() {\r\n    // Return false to cancel the routing\r\n    return confirm(\"Are you sure you want to leave this page?\");\r\n  }\r\n}\r\n```\r\n\r\n### Catching client-side 404 and 403\r\n\r\nA route named 404 can be declared to catch all non-existent routes.\r\nIn the same way a route can be named 403 to catch accessing restricted routes.\r\n\r\n```javascript\r\nBackbone.Router.map(function() {\r\n  // 404 controller\r\n  this.route(\"404\", {\r\n    \"action\": function(path) {\r\n      // Couldn't find what you're looking for =/\r\n    }\r\n  });\r\n\r\n  // 403 controller\r\n  this.route(\"403\", {\r\n    \"action\": function(path) {\r\n      // Sorry you can't access this content =(\r\n    }\r\n  });\r\n});\r\n```\r\n\r\nFor convenience, the action methods will receive the current ```window.location.pathname``` as the first argument.\r\n\r\nThe 404 controller will also be executed when a non-existent route is called with the ```go``` method.\r\n\r\nThe 403 controller will only be executed if the ```redirectToLogin``` option is set to ```false```.\r\n\r\n## Events distribution (Triggers)\r\n\r\nTo distribute the triggers declared in the ```before``` and ```after``` parameters the ```Backbone.Router``` uses the ```Marionette``` global event aggregator: ```App.vent```\r\n\r\nThis parameter can be overridden using any ```Backbone.Events``` instance.\r\n\r\n```javascript\r\nvar App = new Backbone.Marionette.Application();\r\n\r\n// Create a custom event aggregator\r\nvar myDispatcher = _.extend({}, Backbone.Events);\r\n\r\n// Pass the custom object to the Router\r\nBackbone.Router.dispatcher = myDispatcher;\r\n\r\nApp.start();\r\nBackbone.Router.start(App);\r\n```\r\n\r\n## Trigger declaration\r\n\r\nTriggers can be declared in different ways.\r\n\r\nThey can be a simple ```String``` for the simple ones:\r\n\r\n```javascript\r\n{\r\n  // ...\r\n  \"before\": [\r\n    \"core\",\r\n    \"module\",\r\n    \"submodule\"\r\n  ],\r\n  // ...\r\n}\r\n```\r\nThey can also be declared as an object with different parameters:\r\n\r\n```javascript\r\n{\r\n  // ...\r\n  \"before\": [\r\n    { \"name\": \"core\", \"cache\": true },\r\n    { \"name\": \"module\", args: [foo, bar] },\r\n    \"submodule\"\r\n  ],\r\n  // ...\r\n}\r\n```\r\n\r\n**Most importantly:** Each declared route becomes a trigger itself so that routes can build on each other.\r\n\r\n## Secured routes\r\n\r\nEach route can receive an ```authed``` boolean parameter to declare if the route should be interpreted when the user is logged in or not.\r\n\r\n```javascript\r\nBackbone.Router.map(function() {\r\n  // Declare secure route\r\n  this.route(\"secure_route\", {\r\n    \"path\": \"/admin/users\",\r\n    \"authed\": true,\r\n    \"action\": function() {\r\n      // Display list of users\r\n    }\r\n  });\r\n});\r\n```\r\nTo make a route be interpreted in both cases (i.e. when the user is logged in or logged out),\r\nsimply leave out the ```authed``` parameter in the route declaration.\r\n\r\n**Important**\r\n\r\nOnly the server has the authority to tell if a connected client is a logged in user or not.\r\nSo for this system to actually work, the server has to print out a small piece of JavaScript to tell the router the current client's state:\r\n\r\n```php\r\n<script type=\"text/javascript\" src=\"backbone.router.js\"></script>\r\n<script type=\"text/javascript\">\r\nwindow.logged_in = <?php if ($_SESSION['logged_in']): ?>true<?php else: ?>false<?php endif; ?>;\r\n\r\n$(funtion() {\r\n  // Starting the marionette app\r\n  App.start();\r\n\r\n  // Starting the router telling it if the user is logged in or not\r\n  Backbone.Router.start(App, {\r\n    \"authed\": window.logged_in\r\n  });\r\n});\r\n</script>\r\n```\r\n\r\n\r\n## Example\r\n\r\nAn implementation example ```index.php``` file is available in the repository. To run it create an apache vhost or use any web server you like.\r\n\r\nSo that client-side routing can work, every request sent to the server must be answered with the same code,\r\ntherefore an ```.htaccess``` file activating mod_rewrite and redirecting all requests to the ```index.php``` file is also available in the repository.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}